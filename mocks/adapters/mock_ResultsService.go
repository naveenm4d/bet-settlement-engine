// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"github.com/naveenm4d/bet-settlement-engine/pkg/constants"
	mock "github.com/stretchr/testify/mock"
)

// NewMockResultsService creates a new instance of MockResultsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultsService {
	mock := &MockResultsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResultsService is an autogenerated mock type for the ResultsService type
type MockResultsService struct {
	mock.Mock
}

type MockResultsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultsService) EXPECT() *MockResultsService_Expecter {
	return &MockResultsService_Expecter{mock: &_m.Mock}
}

// SettleBetsForEvent provides a mock function for the type MockResultsService
func (_mock *MockResultsService) SettleBetsForEvent(eventID string, resultStatus constants.EventResultStatus) error {
	ret := _mock.Called(eventID, resultStatus)

	if len(ret) == 0 {
		panic("no return value specified for SettleBetsForEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, constants.EventResultStatus) error); ok {
		r0 = returnFunc(eventID, resultStatus)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResultsService_SettleBetsForEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SettleBetsForEvent'
type MockResultsService_SettleBetsForEvent_Call struct {
	*mock.Call
}

// SettleBetsForEvent is a helper method to define mock.On call
//   - eventID
//   - resultStatus
func (_e *MockResultsService_Expecter) SettleBetsForEvent(eventID interface{}, resultStatus interface{}) *MockResultsService_SettleBetsForEvent_Call {
	return &MockResultsService_SettleBetsForEvent_Call{Call: _e.mock.On("SettleBetsForEvent", eventID, resultStatus)}
}

func (_c *MockResultsService_SettleBetsForEvent_Call) Run(run func(eventID string, resultStatus constants.EventResultStatus)) *MockResultsService_SettleBetsForEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(constants.EventResultStatus))
	})
	return _c
}

func (_c *MockResultsService_SettleBetsForEvent_Call) Return(err error) *MockResultsService_SettleBetsForEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResultsService_SettleBetsForEvent_Call) RunAndReturn(run func(eventID string, resultStatus constants.EventResultStatus) error) *MockResultsService_SettleBetsForEvent_Call {
	_c.Call.Return(run)
	return _c
}
