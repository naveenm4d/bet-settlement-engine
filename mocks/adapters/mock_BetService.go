// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"context"

	"github.com/naveenm4d/bet-settlement-engine/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBetService creates a new instance of MockBetService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBetService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBetService {
	mock := &MockBetService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBetService is an autogenerated mock type for the BetService type
type MockBetService struct {
	mock.Mock
}

type MockBetService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBetService) EXPECT() *MockBetService_Expecter {
	return &MockBetService_Expecter{mock: &_m.Mock}
}

// PlaceBet provides a mock function for the type MockBetService
func (_mock *MockBetService) PlaceBet(ctx context.Context, bet *entities.Bet) (*entities.Bet, error) {
	ret := _mock.Called(ctx, bet)

	if len(ret) == 0 {
		panic("no return value specified for PlaceBet")
	}

	var r0 *entities.Bet
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Bet) (*entities.Bet, error)); ok {
		return returnFunc(ctx, bet)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Bet) *entities.Bet); ok {
		r0 = returnFunc(ctx, bet)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Bet)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *entities.Bet) error); ok {
		r1 = returnFunc(ctx, bet)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockBetService_PlaceBet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceBet'
type MockBetService_PlaceBet_Call struct {
	*mock.Call
}

// PlaceBet is a helper method to define mock.On call
//   - ctx
//   - bet
func (_e *MockBetService_Expecter) PlaceBet(ctx interface{}, bet interface{}) *MockBetService_PlaceBet_Call {
	return &MockBetService_PlaceBet_Call{Call: _e.mock.On("PlaceBet", ctx, bet)}
}

func (_c *MockBetService_PlaceBet_Call) Run(run func(ctx context.Context, bet *entities.Bet)) *MockBetService_PlaceBet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Bet))
	})
	return _c
}

func (_c *MockBetService_PlaceBet_Call) Return(bet1 *entities.Bet, err error) *MockBetService_PlaceBet_Call {
	_c.Call.Return(bet1, err)
	return _c
}

func (_c *MockBetService_PlaceBet_Call) RunAndReturn(run func(ctx context.Context, bet *entities.Bet) (*entities.Bet, error)) *MockBetService_PlaceBet_Call {
	_c.Call.Return(run)
	return _c
}
