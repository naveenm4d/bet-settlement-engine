// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"github.com/naveenm4d/bet-settlement-engine/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockAccountsService creates a new instance of MockAccountsService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAccountsService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAccountsService {
	mock := &MockAccountsService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockAccountsService is an autogenerated mock type for the AccountsService type
type MockAccountsService struct {
	mock.Mock
}

type MockAccountsService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAccountsService) EXPECT() *MockAccountsService_Expecter {
	return &MockAccountsService_Expecter{mock: &_m.Mock}
}

// DebitAccount provides a mock function for the type MockAccountsService
func (_mock *MockAccountsService) DebitAccount(userID string, betAmount int64) error {
	ret := _mock.Called(userID, betAmount)

	if len(ret) == 0 {
		panic("no return value specified for DebitAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = returnFunc(userID, betAmount)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountsService_DebitAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DebitAccount'
type MockAccountsService_DebitAccount_Call struct {
	*mock.Call
}

// DebitAccount is a helper method to define mock.On call
//   - userID
//   - betAmount
func (_e *MockAccountsService_Expecter) DebitAccount(userID interface{}, betAmount interface{}) *MockAccountsService_DebitAccount_Call {
	return &MockAccountsService_DebitAccount_Call{Call: _e.mock.On("DebitAccount", userID, betAmount)}
}

func (_c *MockAccountsService_DebitAccount_Call) Run(run func(userID string, betAmount int64)) *MockAccountsService_DebitAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountsService_DebitAccount_Call) Return(err error) *MockAccountsService_DebitAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountsService_DebitAccount_Call) RunAndReturn(run func(userID string, betAmount int64) error) *MockAccountsService_DebitAccount_Call {
	_c.Call.Return(run)
	return _c
}

// GetAccount provides a mock function for the type MockAccountsService
func (_mock *MockAccountsService) GetAccount(userID string) (*entities.Account, error) {
	ret := _mock.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAccount")
	}

	var r0 *entities.Account
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(string) (*entities.Account, error)); ok {
		return returnFunc(userID)
	}
	if returnFunc, ok := ret.Get(0).(func(string) *entities.Account); ok {
		r0 = returnFunc(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entities.Account)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(string) error); ok {
		r1 = returnFunc(userID)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockAccountsService_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockAccountsService_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - userID
func (_e *MockAccountsService_Expecter) GetAccount(userID interface{}) *MockAccountsService_GetAccount_Call {
	return &MockAccountsService_GetAccount_Call{Call: _e.mock.On("GetAccount", userID)}
}

func (_c *MockAccountsService_GetAccount_Call) Run(run func(userID string)) *MockAccountsService_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockAccountsService_GetAccount_Call) Return(account *entities.Account, err error) *MockAccountsService_GetAccount_Call {
	_c.Call.Return(account, err)
	return _c
}

func (_c *MockAccountsService_GetAccount_Call) RunAndReturn(run func(userID string) (*entities.Account, error)) *MockAccountsService_GetAccount_Call {
	_c.Call.Return(run)
	return _c
}

// RefundAccount provides a mock function for the type MockAccountsService
func (_mock *MockAccountsService) RefundAccount(userID string, betAmount int64) error {
	ret := _mock.Called(userID, betAmount)

	if len(ret) == 0 {
		panic("no return value specified for RefundAccount")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(string, int64) error); ok {
		r0 = returnFunc(userID, betAmount)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockAccountsService_RefundAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RefundAccount'
type MockAccountsService_RefundAccount_Call struct {
	*mock.Call
}

// RefundAccount is a helper method to define mock.On call
//   - userID
//   - betAmount
func (_e *MockAccountsService_Expecter) RefundAccount(userID interface{}, betAmount interface{}) *MockAccountsService_RefundAccount_Call {
	return &MockAccountsService_RefundAccount_Call{Call: _e.mock.On("RefundAccount", userID, betAmount)}
}

func (_c *MockAccountsService_RefundAccount_Call) Run(run func(userID string, betAmount int64)) *MockAccountsService_RefundAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockAccountsService_RefundAccount_Call) Return(err error) *MockAccountsService_RefundAccount_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockAccountsService_RefundAccount_Call) RunAndReturn(run func(userID string, betAmount int64) error) *MockAccountsService_RefundAccount_Call {
	_c.Call.Return(run)
	return _c
}
