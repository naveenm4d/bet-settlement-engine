// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"github.com/naveenm4d/bet-settlement-engine/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockCacheRepository creates a new instance of MockCacheRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCacheRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCacheRepository {
	mock := &MockCacheRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockCacheRepository is an autogenerated mock type for the CacheRepository type
type MockCacheRepository struct {
	mock.Mock
}

type MockCacheRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockCacheRepository) EXPECT() *MockCacheRepository_Expecter {
	return &MockCacheRepository_Expecter{mock: &_m.Mock}
}

// GetAccounts provides a mock function for the type MockCacheRepository
func (_mock *MockCacheRepository) GetAccounts() map[string]entities.Account {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAccounts")
	}

	var r0 map[string]entities.Account
	if returnFunc, ok := ret.Get(0).(func() map[string]entities.Account); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.Account)
		}
	}
	return r0
}

// MockCacheRepository_GetAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccounts'
type MockCacheRepository_GetAccounts_Call struct {
	*mock.Call
}

// GetAccounts is a helper method to define mock.On call
func (_e *MockCacheRepository_Expecter) GetAccounts() *MockCacheRepository_GetAccounts_Call {
	return &MockCacheRepository_GetAccounts_Call{Call: _e.mock.On("GetAccounts")}
}

func (_c *MockCacheRepository_GetAccounts_Call) Run(run func()) *MockCacheRepository_GetAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheRepository_GetAccounts_Call) Return(stringToAccount map[string]entities.Account) *MockCacheRepository_GetAccounts_Call {
	_c.Call.Return(stringToAccount)
	return _c
}

func (_c *MockCacheRepository_GetAccounts_Call) RunAndReturn(run func() map[string]entities.Account) *MockCacheRepository_GetAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// GetBets provides a mock function for the type MockCacheRepository
func (_mock *MockCacheRepository) GetBets() map[string]entities.Bet {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetBets")
	}

	var r0 map[string]entities.Bet
	if returnFunc, ok := ret.Get(0).(func() map[string]entities.Bet); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.Bet)
		}
	}
	return r0
}

// MockCacheRepository_GetBets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetBets'
type MockCacheRepository_GetBets_Call struct {
	*mock.Call
}

// GetBets is a helper method to define mock.On call
func (_e *MockCacheRepository_Expecter) GetBets() *MockCacheRepository_GetBets_Call {
	return &MockCacheRepository_GetBets_Call{Call: _e.mock.On("GetBets")}
}

func (_c *MockCacheRepository_GetBets_Call) Run(run func()) *MockCacheRepository_GetBets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheRepository_GetBets_Call) Return(stringToBet map[string]entities.Bet) *MockCacheRepository_GetBets_Call {
	_c.Call.Return(stringToBet)
	return _c
}

func (_c *MockCacheRepository_GetBets_Call) RunAndReturn(run func() map[string]entities.Bet) *MockCacheRepository_GetBets_Call {
	_c.Call.Return(run)
	return _c
}

// GetEvents provides a mock function for the type MockCacheRepository
func (_mock *MockCacheRepository) GetEvents() map[string]entities.Event {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetEvents")
	}

	var r0 map[string]entities.Event
	if returnFunc, ok := ret.Get(0).(func() map[string]entities.Event); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]entities.Event)
		}
	}
	return r0
}

// MockCacheRepository_GetEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEvents'
type MockCacheRepository_GetEvents_Call struct {
	*mock.Call
}

// GetEvents is a helper method to define mock.On call
func (_e *MockCacheRepository_Expecter) GetEvents() *MockCacheRepository_GetEvents_Call {
	return &MockCacheRepository_GetEvents_Call{Call: _e.mock.On("GetEvents")}
}

func (_c *MockCacheRepository_GetEvents_Call) Run(run func()) *MockCacheRepository_GetEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockCacheRepository_GetEvents_Call) Return(stringToEvent map[string]entities.Event) *MockCacheRepository_GetEvents_Call {
	_c.Call.Return(stringToEvent)
	return _c
}

func (_c *MockCacheRepository_GetEvents_Call) RunAndReturn(run func() map[string]entities.Event) *MockCacheRepository_GetEvents_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateAccounts provides a mock function for the type MockCacheRepository
func (_mock *MockCacheRepository) UpdateAccounts(accounts map[string]entities.Account) error {
	ret := _mock.Called(accounts)

	if len(ret) == 0 {
		panic("no return value specified for UpdateAccounts")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]entities.Account) error); ok {
		r0 = returnFunc(accounts)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCacheRepository_UpdateAccounts_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateAccounts'
type MockCacheRepository_UpdateAccounts_Call struct {
	*mock.Call
}

// UpdateAccounts is a helper method to define mock.On call
//   - accounts
func (_e *MockCacheRepository_Expecter) UpdateAccounts(accounts interface{}) *MockCacheRepository_UpdateAccounts_Call {
	return &MockCacheRepository_UpdateAccounts_Call{Call: _e.mock.On("UpdateAccounts", accounts)}
}

func (_c *MockCacheRepository_UpdateAccounts_Call) Run(run func(accounts map[string]entities.Account)) *MockCacheRepository_UpdateAccounts_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]entities.Account))
	})
	return _c
}

func (_c *MockCacheRepository_UpdateAccounts_Call) Return(err error) *MockCacheRepository_UpdateAccounts_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheRepository_UpdateAccounts_Call) RunAndReturn(run func(accounts map[string]entities.Account) error) *MockCacheRepository_UpdateAccounts_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateBets provides a mock function for the type MockCacheRepository
func (_mock *MockCacheRepository) UpdateBets(bets map[string]entities.Bet) error {
	ret := _mock.Called(bets)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBets")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]entities.Bet) error); ok {
		r0 = returnFunc(bets)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCacheRepository_UpdateBets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateBets'
type MockCacheRepository_UpdateBets_Call struct {
	*mock.Call
}

// UpdateBets is a helper method to define mock.On call
//   - bets
func (_e *MockCacheRepository_Expecter) UpdateBets(bets interface{}) *MockCacheRepository_UpdateBets_Call {
	return &MockCacheRepository_UpdateBets_Call{Call: _e.mock.On("UpdateBets", bets)}
}

func (_c *MockCacheRepository_UpdateBets_Call) Run(run func(bets map[string]entities.Bet)) *MockCacheRepository_UpdateBets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]entities.Bet))
	})
	return _c
}

func (_c *MockCacheRepository_UpdateBets_Call) Return(err error) *MockCacheRepository_UpdateBets_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheRepository_UpdateBets_Call) RunAndReturn(run func(bets map[string]entities.Bet) error) *MockCacheRepository_UpdateBets_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateEvents provides a mock function for the type MockCacheRepository
func (_mock *MockCacheRepository) UpdateEvents(events map[string]entities.Event) error {
	ret := _mock.Called(events)

	if len(ret) == 0 {
		panic("no return value specified for UpdateEvents")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(map[string]entities.Event) error); ok {
		r0 = returnFunc(events)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockCacheRepository_UpdateEvents_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateEvents'
type MockCacheRepository_UpdateEvents_Call struct {
	*mock.Call
}

// UpdateEvents is a helper method to define mock.On call
//   - events
func (_e *MockCacheRepository_Expecter) UpdateEvents(events interface{}) *MockCacheRepository_UpdateEvents_Call {
	return &MockCacheRepository_UpdateEvents_Call{Call: _e.mock.On("UpdateEvents", events)}
}

func (_c *MockCacheRepository_UpdateEvents_Call) Run(run func(events map[string]entities.Event)) *MockCacheRepository_UpdateEvents_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(map[string]entities.Event))
	})
	return _c
}

func (_c *MockCacheRepository_UpdateEvents_Call) Return(err error) *MockCacheRepository_UpdateEvents_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockCacheRepository_UpdateEvents_Call) RunAndReturn(run func(events map[string]entities.Event) error) *MockCacheRepository_UpdateEvents_Call {
	_c.Call.Return(run)
	return _c
}
