// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"github.com/naveenm4d/bet-settlement-engine/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockResultsValidator creates a new instance of MockResultsValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockResultsValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockResultsValidator {
	mock := &MockResultsValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockResultsValidator is an autogenerated mock type for the ResultsValidator type
type MockResultsValidator struct {
	mock.Mock
}

type MockResultsValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockResultsValidator) EXPECT() *MockResultsValidator_Expecter {
	return &MockResultsValidator_Expecter{mock: &_m.Mock}
}

// ValidateBetForSettlement provides a mock function for the type MockResultsValidator
func (_mock *MockResultsValidator) ValidateBetForSettlement(bet *entities.Bet) error {
	ret := _mock.Called(bet)

	if len(ret) == 0 {
		panic("no return value specified for ValidateBetForSettlement")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entities.Bet) error); ok {
		r0 = returnFunc(bet)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResultsValidator_ValidateBetForSettlement_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateBetForSettlement'
type MockResultsValidator_ValidateBetForSettlement_Call struct {
	*mock.Call
}

// ValidateBetForSettlement is a helper method to define mock.On call
//   - bet
func (_e *MockResultsValidator_Expecter) ValidateBetForSettlement(bet interface{}) *MockResultsValidator_ValidateBetForSettlement_Call {
	return &MockResultsValidator_ValidateBetForSettlement_Call{Call: _e.mock.On("ValidateBetForSettlement", bet)}
}

func (_c *MockResultsValidator_ValidateBetForSettlement_Call) Run(run func(bet *entities.Bet)) *MockResultsValidator_ValidateBetForSettlement_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Bet))
	})
	return _c
}

func (_c *MockResultsValidator_ValidateBetForSettlement_Call) Return(err error) *MockResultsValidator_ValidateBetForSettlement_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResultsValidator_ValidateBetForSettlement_Call) RunAndReturn(run func(bet *entities.Bet) error) *MockResultsValidator_ValidateBetForSettlement_Call {
	_c.Call.Return(run)
	return _c
}

// ValidateEvent provides a mock function for the type MockResultsValidator
func (_mock *MockResultsValidator) ValidateEvent(event *entities.Event) error {
	ret := _mock.Called(event)

	if len(ret) == 0 {
		panic("no return value specified for ValidateEvent")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(*entities.Event) error); ok {
		r0 = returnFunc(event)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockResultsValidator_ValidateEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateEvent'
type MockResultsValidator_ValidateEvent_Call struct {
	*mock.Call
}

// ValidateEvent is a helper method to define mock.On call
//   - event
func (_e *MockResultsValidator_Expecter) ValidateEvent(event interface{}) *MockResultsValidator_ValidateEvent_Call {
	return &MockResultsValidator_ValidateEvent_Call{Call: _e.mock.On("ValidateEvent", event)}
}

func (_c *MockResultsValidator_ValidateEvent_Call) Run(run func(event *entities.Event)) *MockResultsValidator_ValidateEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entities.Event))
	})
	return _c
}

func (_c *MockResultsValidator_ValidateEvent_Call) Return(err error) *MockResultsValidator_ValidateEvent_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockResultsValidator_ValidateEvent_Call) RunAndReturn(run func(event *entities.Event) error) *MockResultsValidator_ValidateEvent_Call {
	_c.Call.Return(run)
	return _c
}
