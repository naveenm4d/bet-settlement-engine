// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"net/http"

	mock "github.com/stretchr/testify/mock"
)

// NewMockHandler creates a new instance of MockHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHandler {
	mock := &MockHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockHandler is an autogenerated mock type for the Handler type
type MockHandler struct {
	mock.Mock
}

type MockHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHandler) EXPECT() *MockHandler_Expecter {
	return &MockHandler_Expecter{mock: &_m.Mock}
}

// GetAccount provides a mock function for the type MockHandler
func (_mock *MockHandler) GetAccount(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_GetAccount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAccount'
type MockHandler_GetAccount_Call struct {
	*mock.Call
}

// GetAccount is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockHandler_Expecter) GetAccount(w interface{}, r interface{}) *MockHandler_GetAccount_Call {
	return &MockHandler_GetAccount_Call{Call: _e.mock.On("GetAccount", w, r)}
}

func (_c *MockHandler_GetAccount_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_GetAccount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_GetAccount_Call) Return() *MockHandler_GetAccount_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_GetAccount_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_GetAccount_Call {
	_c.Run(run)
	return _c
}

// Ping provides a mock function for the type MockHandler
func (_mock *MockHandler) Ping(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockHandler_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockHandler_Expecter) Ping(w interface{}, r interface{}) *MockHandler_Ping_Call {
	return &MockHandler_Ping_Call{Call: _e.mock.On("Ping", w, r)}
}

func (_c *MockHandler_Ping_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_Ping_Call) Return() *MockHandler_Ping_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_Ping_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_Ping_Call {
	_c.Run(run)
	return _c
}

// PlaceBet provides a mock function for the type MockHandler
func (_mock *MockHandler) PlaceBet(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_PlaceBet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PlaceBet'
type MockHandler_PlaceBet_Call struct {
	*mock.Call
}

// PlaceBet is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockHandler_Expecter) PlaceBet(w interface{}, r interface{}) *MockHandler_PlaceBet_Call {
	return &MockHandler_PlaceBet_Call{Call: _e.mock.On("PlaceBet", w, r)}
}

func (_c *MockHandler_PlaceBet_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_PlaceBet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_PlaceBet_Call) Return() *MockHandler_PlaceBet_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_PlaceBet_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_PlaceBet_Call {
	_c.Run(run)
	return _c
}

// SettleBets provides a mock function for the type MockHandler
func (_mock *MockHandler) SettleBets(w http.ResponseWriter, r *http.Request) {
	_mock.Called(w, r)
	return
}

// MockHandler_SettleBets_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SettleBets'
type MockHandler_SettleBets_Call struct {
	*mock.Call
}

// SettleBets is a helper method to define mock.On call
//   - w
//   - r
func (_e *MockHandler_Expecter) SettleBets(w interface{}, r interface{}) *MockHandler_SettleBets_Call {
	return &MockHandler_SettleBets_Call{Call: _e.mock.On("SettleBets", w, r)}
}

func (_c *MockHandler_SettleBets_Call) Run(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_SettleBets_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(http.ResponseWriter), args[1].(*http.Request))
	})
	return _c
}

func (_c *MockHandler_SettleBets_Call) Return() *MockHandler_SettleBets_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockHandler_SettleBets_Call) RunAndReturn(run func(w http.ResponseWriter, r *http.Request)) *MockHandler_SettleBets_Call {
	_c.Run(run)
	return _c
}
