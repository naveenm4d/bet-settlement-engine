// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package adapters

import (
	"context"

	"github.com/naveenm4d/bet-settlement-engine/pkg/entities"
	mock "github.com/stretchr/testify/mock"
)

// NewMockBetsValidator creates a new instance of MockBetsValidator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockBetsValidator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockBetsValidator {
	mock := &MockBetsValidator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockBetsValidator is an autogenerated mock type for the BetsValidator type
type MockBetsValidator struct {
	mock.Mock
}

type MockBetsValidator_Expecter struct {
	mock *mock.Mock
}

func (_m *MockBetsValidator) EXPECT() *MockBetsValidator_Expecter {
	return &MockBetsValidator_Expecter{mock: &_m.Mock}
}

// ValidateBet provides a mock function for the type MockBetsValidator
func (_mock *MockBetsValidator) ValidateBet(ctx context.Context, bet *entities.Bet) error {
	ret := _mock.Called(ctx, bet)

	if len(ret) == 0 {
		panic("no return value specified for ValidateBet")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *entities.Bet) error); ok {
		r0 = returnFunc(ctx, bet)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockBetsValidator_ValidateBet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidateBet'
type MockBetsValidator_ValidateBet_Call struct {
	*mock.Call
}

// ValidateBet is a helper method to define mock.On call
//   - ctx
//   - bet
func (_e *MockBetsValidator_Expecter) ValidateBet(ctx interface{}, bet interface{}) *MockBetsValidator_ValidateBet_Call {
	return &MockBetsValidator_ValidateBet_Call{Call: _e.mock.On("ValidateBet", ctx, bet)}
}

func (_c *MockBetsValidator_ValidateBet_Call) Run(run func(ctx context.Context, bet *entities.Bet)) *MockBetsValidator_ValidateBet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*entities.Bet))
	})
	return _c
}

func (_c *MockBetsValidator_ValidateBet_Call) Return(err error) *MockBetsValidator_ValidateBet_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockBetsValidator_ValidateBet_Call) RunAndReturn(run func(ctx context.Context, bet *entities.Bet) error) *MockBetsValidator_ValidateBet_Call {
	_c.Call.Return(run)
	return _c
}
